{"version":3,"sources":["components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/App/App.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","components/Container/Container.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","Container","children","className","s","container","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normilizedFilter","toLowerCase","contact","name","includes","ContactForm","number","id","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","filterName","props","find","alert","reset","onAddContact","this","onSubmit","form","label","title","input","type","onChange","pattern","required","button","Component","connect","dispatch","a","post","data","addContact","actions","target","onDeleteContact","contactId","delete","deleteContact","item","onClick","list","map","fetchContacts","get","titlePhonebbok","titleContacts","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistedReducer","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.4b9aa954.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3RcU-\",\"contact\":\"ContactListItem_contact__2BqUs\",\"name\":\"ContactListItem_name__37DJP\",\"number\":\"ContactListItem_number__14RWX\",\"button\":\"ContactListItem_button__1jJXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3dsYf\",\"title\":\"Filter_title__2GadK\",\"input\":\"Filter_input__TS_DL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titlePhonebbok\":\"App_titlePhonebbok__3hGJh\",\"titleContacts\":\"App_titleContacts__1x9H5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1qEa5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1SUfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1X8yD\",\"label\":\"ContactForm_label__1QFn7\",\"title\":\"ContactForm_title__2gK9-\",\"input\":\"ContactForm_input__2m-R6\",\"button\":\"ContactForm_button__1e6Qi\"};","//without Redux Toolkit\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('app/changeFilter');\r\n\r\n    \r\n\r\n\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './contacts-action'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    //асинхронный код\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error))\r\n    }\r\n    \r\n    //синхронный код\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactError(error)))\r\n}\r\n\r\nexport const addContact = ({ name, number }) => async dispatch => {\r\n    const contact = {\r\n        name,\r\n        number\r\n    }\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact);\r\n        dispatch(addContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(addContactError(error))\r\n    }\r\n\r\n    // axios\r\n    //     .post('/contacts', contact)\r\n    //     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    //     .catch(error => dispatch(addContactError(error)));\r\n}\r\n\r\nexport const deleteContact = contactId => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    try {\r\n        const response = await axios.delete(`/contacts/${contactId}`);\r\n        dispatch(deleteContactSuccess(contactId))\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error))\r\n    }\r\n\r\n    // axios\r\n    //     .delete(`/contacts/${contactId}`)\r\n    //     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    //     .catch(error => dispatch(deleteContactError(error)));\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Container.module.css';\r\n\r\nconst Container = ({ children }) => <div className={s.container}>{children}</div>;\r\n\r\nexport default Container;","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\n//selector's memoization\r\nexport const getVisibleContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    //тело функции будет выполнено только если изменится contacts или filter\r\n    (contacts, filter) => {\r\n        const normilizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normilizedFilter));\r\n    }\r\n)   \r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n        id: ''\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n        const filterName = this.state.name;\r\n    \r\n        if (this.props.contacts.find(contact => contact.name.toLowerCase() === filterName.toLowerCase())) {\r\n            alert(`${filterName} is already in contacts`);\r\n            this.reset();\r\n            return;\r\n        }\r\n        \r\n        this.props.onAddContact(this.state);\r\n        this.reset();\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n    }\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n        \r\n        return (\r\n            \r\n            <form onSubmit={this.handleSubmit} className={s.form}>\r\n                    <label className={s.label}>\r\n                        <span className={s.title}>Name</span>\r\n                        <input\r\n                            className={s.input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            onChange={this.handleChange}\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <label className={s.label}>\r\n                        <span className={s.title}>Number</span>\r\n                        <input\r\n                            className={s.input}\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            value={number}\r\n                            onChange={this.handleChange}\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                        />\r\n                    </label>\r\n                    <button className={s.button} type=\"submit\">Add contact</button>\r\n                </form>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contacts: getContacts(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   \r\n  return {\r\n    onAddContact: ({name, number}) => dispatch(addContact({name, number})),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contacts/contacts-action';\r\nimport {getFilter} from '../../redux/contacts/contacts-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label className={s.label}>\r\n        <span className={s.title}>Find contacts by name</span>\r\n        <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n)\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      value: getFilter(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onChange: e => dispatch(actions.changeFilter(e.target.value)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange:PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {deleteContact} from '../../redux/contacts/contacts-operations'\r\nimport s from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({contacts, onDeleteContact }) => (\r\n    <div className={s.item}>\r\n        <p className={s.contact}>\r\n            <span className={s.name}>{contacts.name}:\r\n            </span>\r\n            <span className={s.number}>{contacts.number}\r\n            </span>\r\n        </p>\r\n        <button className={s.button} onClick={()=> onDeleteContact(contacts.id)}>Delete</button>\r\n    </div> \r\n)\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: (contactId) => dispatch(deleteContact(contactId)),\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n\r\nContactListItem.propTypes = {\r\n  contacts: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired\r\n  }),\r\n    onDeleteContact:PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n//import {fetchContacts} from '../../redux/contacts/contacts-operations'\r\nimport s from './ContactList.module.css';\r\nimport ContactListItem from '../ContactListItem';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst ContactList = ({contacts}) => (\r\n    <ul className={s.list}>\r\n        {contacts.map((contacts)=> (\r\n            <li key={contacts.id}  >\r\n                <ContactListItem contacts={contacts}/>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: getVisibleContacts(state)\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, null)(ContactList);\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n};\r\n\r\n ","import React from 'react';\nimport { connect } from 'react-redux';\nimport {fetchContacts} from '../../redux/contacts/contacts-operations'\nimport s from './App.module.css';\nimport Container from '../Container';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nfunction App({ fetchContacts }) {\n  fetchContacts();\n    return (\n      <Container>\n        <div>\n          <h1 className={s.titlePhonebbok}>Phonebook</h1>\n          <ContactForm />\n          <h2 className={s.titleContacts}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </Container>\n    );\n  \n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContacts())\n})\n\nexport default connect(null, mapDispatchToProps)(App);\n\n\n","//with Redux Toolkit\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit'\r\n\r\nimport {\r\n    //addContactRequest,\r\n    addContactSuccess,\r\n    // addContactError,\r\n    // deleteContactRequest,\r\n    deleteContactSuccess,\r\n    // deleteContactError,\r\n    // fetchContactRequest,\r\n    fetchContactSuccess,\r\n    //etchContactError,\r\n    changeFilter\r\n} from './contacts-action'\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]:(_, {payload}) => payload,\r\n    [addContactSuccess]: (state, {payload}) => [payload, ...state],\r\n    [deleteContactSuccess]: (state, {payload}) =>\r\n        state.filter(({id}) => id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n   [changeFilter]:(_, {payload}) => payload, \r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n});\r\n\r\n","//with Redux Toolkit\r\nimport { configureStore, getDefaultMiddleware, combineReducers } from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist';\r\n//import storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const myMiddleware = store => next => action => {\r\n//     console.log('Моя прослойка')\r\n// }\r\n\r\n//for watching prevState, action, nextState in console\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n}),\r\n    logger]\r\n\r\n//localStorage\r\n// const persistConfig = {\r\n//     key: 'contacts',\r\n//     storage\r\n// }\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n})\r\n\r\nconst persistedReducer = rootReducer\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer, \r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n//обертка над store, которая реализует обновление LocalStorage\r\n//const persistor = persistStore(store);\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n//import { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n    \n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}